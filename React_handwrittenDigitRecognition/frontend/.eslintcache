[{"/home/danji/webProject/insertImage/frontend/src/index.js":"1","/home/danji/webProject/insertImage/frontend/src/App.js":"2","/home/danji/webProject/insertImage/frontend/src/reportWebVitals.js":"3","/home/danji/webProject/insertImage/frontend/src/lib/requests.js":"4"},{"size":500,"mtime":1611301320940,"results":"5","hashOfConfig":"6"},{"size":2045,"mtime":1614753700733,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1611301320940,"results":"8","hashOfConfig":"6"},{"size":373,"mtime":1614649886850,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1p05dhl",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/danji/webProject/insertImage/frontend/src/index.js",[],["19","20"],"/home/danji/webProject/insertImage/frontend/src/App.js",["21"],"/home/danji/webProject/insertImage/frontend/src/reportWebVitals.js",[],"/home/danji/webProject/insertImage/frontend/src/lib/requests.js",["22"],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":15,"column":9,"nodeType":"29","endLine":15,"endColumn":32},{"ruleId":"30","severity":1,"message":"31","line":15,"column":1,"nodeType":"32","endLine":17,"endColumn":2},"no-native-reassign",["33"],"no-negated-in-lhs",["34"],"react-hooks/exhaustive-deps","Assignments to the 'ctx' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]